Music Platform Database Schema
Overview
Database Entities and Relationships
User Management
Users Table
User Authentication
Music Preferences
User Music Preferences
Artists
Artists Table
Artist Verification
Artist Payout Methods
Content
Posts
Comments
Likes
Share Links
Reviews
Artist Communities
Communities
Community Subscriptions
Interactive Forums
Live Events
E-commerce
Products
Orders
Order Items
Payments
Featured Content
Notifications
Status History Tracking
Schema Migrations and Management
Data Security Considerations
Indexing Strategy
Redis Caching Strategy
Scaling Considerations

Music Platform Database Schema
Overview
This document outlines the PostgreSQL database schema for the music platform. The
schema is designed to support user management, artist communities, content sharing, ecommerce, and other functionalities specified in the requirements.

Database Entities and Relationships
User Management
Users Table

CREATE TABLE users (
user_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
username VARCHAR(50) UNIQUE NOT NULL,
email VARCHAR(255) UNIQUE NOT NULL,
password_hash VARCHAR(255),
full_name VARCHAR(100) NOT NULL,
gender VARCHAR(20),
date_of_birth DATE,
city VARCHAR(100),
country VARCHAR(100),
mobile_number VARCHAR(20),
profile_picture_url TEXT,
bio TEXT,
is_verified BOOLEAN DEFAULT FALSE,
is_artist BOOLEAN DEFAULT FALSE,
google_id VARCHAR(255) UNIQUE,
spotify_linked BOOLEAN DEFAULT FALSE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
last_login TIMESTAMP WITH TIME ZONE,
deleted_at TIMESTAMP WITH TIME ZONE
);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);

User Authentication

CREATE TABLE user_verification (
verification_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
verification_token VARCHAR(255) NOT NULL,
verification_type VARCHAR(50) NOT NULL, -- 'email', 'password_reset',
etc.
expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
is_used BOOLEAN DEFAULT FALSE,
CONSTRAINT unique_active_token UNIQUE (user_id, verification_type,
is_used)
);

Music Preferences
User Music Preferences

CREATE TABLE genres (
genre_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
name VARCHAR(100) UNIQUE NOT NULL
);
CREATE TABLE languages (
language_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
name VARCHAR(100) UNIQUE NOT NULL
);
CREATE TABLE user_preferences (
preference_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
genres UUID[] DEFAULT '{}',
languages UUID[] DEFAULT '{}',
favorite_artists UUID[] DEFAULT '{}',
spotify_id VARCHAR(255),
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_user_preferences_user_id ON user_preferences(user_id);

Artists
Artists Table

CREATE TABLE artists (
artist_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID REFERENCES users(user_id) ON DELETE SET NULL, -- Artist's
user account
artist_name VARCHAR(255) NOT NULL,
bio TEXT,
profile_picture_url TEXT,
cover_photo_url TEXT,
verification_status VARCHAR(50) DEFAULT 'pending', -- 'pending',
'verified', 'rejected'
third_party_platform VARCHAR(50), -- 'soundchart', 'chartmetric',
'viberate', 'manual'
third_party_id VARCHAR(255), -- ID from the third-party platform
featured BOOLEAN DEFAULT FALSE,
payout_method JSONB, -- For simple cases, can store payment details
directly
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_artists_name ON artists(artist_name);

Artist Verification

CREATE TABLE artist_verification (
verification_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
artist_id UUID NOT NULL REFERENCES artists(artist_id) ON DELETE CASCADE,
verification_document_urls TEXT[],
admin_notes TEXT,
status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'approved',
'rejected'
verified_by UUID REFERENCES users(user_id) ON DELETE SET NULL,
submission_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
verification_date TIMESTAMP WITH TIME ZONE
);

Artist Payout Methods

CREATE TABLE artist_payout_methods (
payout_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
artist_id UUID NOT NULL REFERENCES artists(artist_id) ON DELETE CASCADE,
method_type VARCHAR(50) NOT NULL, -- 'bank_transfer', 'paypal', etc.
account_details JSONB NOT NULL, -- Encrypted details
is_default BOOLEAN DEFAULT FALSE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

Content
Posts

CREATE TABLE posts (
post_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
artist_id UUID NOT NULL REFERENCES artists(artist_id) ON DELETE CASCADE,
content_text TEXT,
media_type VARCHAR(50), -- 'image', 'video', 'audio', 'none'
media_urls TEXT[],
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
deleted_at TIMESTAMP WITH TIME ZONE
);
CREATE INDEX idx_posts_artist_id ON posts(artist_id);
CREATE INDEX idx_posts_created_at ON posts(created_at);

Comments

CREATE TABLE comments (
comment_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
post_id UUID REFERENCES posts(post_id) ON DELETE CASCADE,
parent_comment_id UUID REFERENCES comments(comment_id) ON DELETE CASCADE,
review_id UUID REFERENCES reviews(review_id) ON DELETE CASCADE,
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
content TEXT NOT NULL,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
deleted_at TIMESTAMP WITH TIME ZONE,
CHECK (
  post_id IS NOT NULL OR parent_comment_id IS NOT NULL OR review_id IS NOT NULL
)
);
CREATE INDEX idx_comments_post_id ON comments(post_id);
CREATE INDEX idx_comments_parent_id ON comments(parent_comment_id);
CREATE INDEX idx_comments_review_id ON comments(review_id);
CREATE INDEX idx_comments_user_id ON comments(user_id);

Likes

CREATE TABLE likes (
like_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
post_id UUID REFERENCES posts(post_id) ON DELETE CASCADE,
comment_id UUID REFERENCES comments(comment_id) ON DELETE CASCADE,
review_id UUID REFERENCES reviews(review_id) ON DELETE CASCADE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
CHECK (
  (post_id IS NOT NULL AND comment_id IS NULL AND review_id IS NULL) OR
  (post_id IS NULL AND comment_id IS NOT NULL AND review_id IS NULL) OR
  (post_id IS NULL AND comment_id IS NULL AND review_id IS NOT NULL)
),
UNIQUE (user_id, post_id, comment_id, review_id)
);
CREATE INDEX idx_likes_post_id ON likes(post_id);
CREATE INDEX idx_likes_comment_id ON likes(comment_id);
CREATE INDEX idx_likes_review_id ON likes(review_id);
CREATE INDEX idx_likes_user_id ON likes(user_id);

Share Links

CREATE TABLE share_links (
link_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
post_id UUID NOT NULL REFERENCES posts(post_id) ON DELETE CASCADE,
created_by UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
share_token VARCHAR(255) NOT NULL UNIQUE,
expires_at TIMESTAMP WITH TIME ZONE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

Reviews

CREATE TABLE reviews (
review_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
content_type VARCHAR(20) NOT NULL, -- 'album', 'song'
content_id VARCHAR(255) NOT NULL, -- Could be album ID or song ID
artist_id UUID REFERENCES artists(artist_id) ON DELETE SET NULL, -- Can
be null if artist not onboarded
artist_name VARCHAR(255), -- Can be null if artist not onboarded
content_name VARCHAR(255) NOT NULL, -- Name of album or song being
reviewed
title VARCHAR(255) NOT NULL,
text_content TEXT NOT NULL,
rating SMALLINT NOT NULL CHECK (rating BETWEEN 1 AND 5),
image_urls TEXT[],
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_reviews_user_id ON reviews(user_id);
CREATE INDEX idx_reviews_content ON reviews(content_type, content_id);

Artist Communities

Communities

CREATE TABLE communities (
community_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
artist_id UUID NOT NULL REFERENCES artists(artist_id) ON DELETE CASCADE,
name VARCHAR(255) NOT NULL,
description TEXT,
subscription_fee DECIMAL(10, 2) NOT NULL,
subscription_interval VARCHAR(20) NOT NULL DEFAULT 'monthly', -'monthly', 'yearly', etc.
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
UNIQUE (artist_id, name)
);

Community Subscriptions

CREATE TABLE community_subscriptions (
subscription_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
community_id UUID NOT NULL REFERENCES communities(community_id) ON
DELETE CASCADE,
start_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
end_date TIMESTAMP WITH TIME ZONE NOT NULL,
is_active BOOLEAN DEFAULT TRUE,
payment_id UUID REFERENCES payments(payment_id),
auto_renew BOOLEAN DEFAULT TRUE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
UNIQUE (user_id, community_id)
);
CREATE INDEX idx_subscriptions_user_id ON community_subscriptions(user_id);
CREATE INDEX idx_subscriptions_community_id ON
community_subscriptions(community_id);
CREATE INDEX idx_subscriptions_end_date ON
community_subscriptions(end_date);

Interactive Forums

CREATE TABLE forums (
forum_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
community_id UUID NOT NULL REFERENCES communities(community_id) ON
DELETE CASCADE,
name VARCHAR(255) NOT NULL,
description TEXT,
forum_type VARCHAR(50) NOT NULL, -- Defines interaction type:
'artist_forum' (only artist posts, appears in feed), 'all_chat' (all members

can chat), 'fan_art' (fan artwork sharing), 'suggestions' (user feedback to
artist)
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
UNIQUE (community_id, name)
);
CREATE TABLE forum_posts (
forum_post_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
forum_id UUID NOT NULL REFERENCES forums(forum_id) ON DELETE CASCADE,
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
title VARCHAR(255),
content TEXT,
media_type VARCHAR(50), -- 'image', 'video', 'audio', 'none'
media_urls TEXT[],
is_pinned BOOLEAN DEFAULT FALSE,
is_answered BOOLEAN DEFAULT FALSE, -- For Q&A forums
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_forum_posts_forum_id ON forum_posts(forum_id);
CREATE INDEX idx_forum_posts_user_id ON forum_posts(user_id);
CREATE INDEX idx_forum_posts_created_at ON forum_posts(created_at);

Live Events
CREATE TABLE live_events (
event_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
community_id UUID NOT NULL REFERENCES communities(community_id) ON
DELETE CASCADE,
title VARCHAR(255) NOT NULL,
description TEXT,
event_type VARCHAR(50) NOT NULL, -- 'qa', 'chat', etc.
start_time TIMESTAMP WITH TIME ZONE NOT NULL,
end_time TIMESTAMP WITH TIME ZONE,
status VARCHAR(50) DEFAULT 'scheduled', -- 'scheduled', 'live',
'completed', 'cancelled'
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_live_events_community_id ON live_events(community_id);
CREATE INDEX idx_live_events_start_time ON live_events(start_time);
CREATE INDEX idx_live_events_status ON live_events(status);

E-commerce

Products

CREATE TABLE products (
product_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
artist_id UUID NOT NULL REFERENCES artists(artist_id) ON DELETE CASCADE,
name VARCHAR(255) NOT NULL,
description TEXT,
product_type VARCHAR(50) NOT NULL, -- 'music_download',
'exclusive_release', 'merchandise'
price DECIMAL(10, 2) NOT NULL,
stock_quantity INTEGER,
image_urls TEXT[],
is_active BOOLEAN DEFAULT TRUE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_products_artist_id ON products(artist_id);
CREATE INDEX idx_products_type ON products(product_type);

Orders

CREATE TABLE orders (
order_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE SET NULL,
total_amount DECIMAL(10, 2) NOT NULL,
status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'paid', 'shipped',
'delivered', 'cancelled'
shipping_address JSONB,
contact_email VARCHAR(255) NOT NULL,
contact_phone VARCHAR(20),
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);

Order Items

CREATE TABLE order_items (
order_item_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
order_id UUID NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
product_id UUID NOT NULL REFERENCES products(product_id) ON DELETE
RESTRICT,
quantity INTEGER NOT NULL DEFAULT 1,
unit_price DECIMAL(10, 2) NOT NULL,
subtotal DECIMAL(10, 2) NOT NULL,

download_url TEXT, -- For digital products
download_expires_at TIMESTAMP WITH TIME ZONE, -- For digital products
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);

Payments

CREATE TABLE payments (
payment_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE SET NULL,
order_id UUID REFERENCES orders(order_id) ON DELETE SET NULL,
subscription_id UUID REFERENCES community_subscriptions(subscription_id)
ON DELETE SET NULL,
amount DECIMAL(10, 2) NOT NULL,
currency VARCHAR(3) DEFAULT 'USD',
payment_method VARCHAR(50) NOT NULL, -- 'credit_card', 'paypal', etc.
payment_status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'completed',
'failed', 'refunded'
stripe_payment_id VARCHAR(255),
payment_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
CHECK (order_id IS NOT NULL OR subscription_id IS NOT NULL)
);
CREATE INDEX idx_payments_user_id ON payments(user_id);
CREATE INDEX idx_payments_order_id ON payments(order_id);
CREATE INDEX idx_payments_subscription_id ON payments(subscription_id);

Featured Content
CREATE TABLE featured_items (
feature_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
item_type VARCHAR(50) NOT NULL, -- 'artist', 'album', 'song', 'product'
item_id VARCHAR(255) NOT NULL,
start_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
end_date TIMESTAMP WITH TIME ZONE NOT NULL,
position INTEGER,
payment_id UUID REFERENCES payments(payment_id) ON DELETE SET NULL,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_featured_items_type_id ON featured_items(item_type,
item_id);
CREATE INDEX idx_featured_items_date ON featured_items(start_date,
end_date);

Notifications
CREATE TABLE notifications (
notification_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
title VARCHAR(255) NOT NULL,
message TEXT NOT NULL,
notification_type VARCHAR(50) NOT NULL, -- 'post', 'comment',
'subscription', etc.
related_resource_type VARCHAR(50), -- 'post', 'comment', etc.
related_resource_id UUID,
is_read BOOLEAN DEFAULT FALSE,
created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_is_read ON notifications(is_read);
CREATE INDEX idx_notifications_created_at ON notifications(created_at);

Status History Tracking
CREATE TABLE status_history (
id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
entity_type VARCHAR(50) NOT NULL, -- 'user', 'post', 'order', etc.
entity_id UUID NOT NULL,
old_status VARCHAR(50),
new_status VARCHAR(50) NOT NULL,
changed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
changed_by UUID REFERENCES users(user_id)
);
CREATE INDEX idx_status_history_entity ON status_history(entity_type,
entity_id);

Schema Migrations and Management
This schema will need to be implemented via migrations to ensure proper versioning and
deployment across environments. The migrations should be tracked in version control
and executed as part of the deployment process.

Data Security Considerations
1. All passwords should be hashed using industry-standard algorithms (e.g., bcrypt)
2. Sensitive data like payment information should be encrypted
3. Payment processing should integrate with Stripe API according to their security
requirements
4. Database access should be restricted via proper user permissions
5. Regular backups and point-in-time recovery should be implemented

Indexing Strategy
The schema includes indexes on columns that will be frequently queried, including:
User email and username for login lookups
Artist names for searches
Post and comment creation dates for timeline ordering
Foreign keys for relationship lookups
Subscription end dates for renewal processing
Order and payment status for processing and reporting

Redis Caching Strategy
For frequently accessed data, Redis can be used to cache:
1. User profile information
2. Artist community information
3. Active subscriptions
4. Popular posts and content
5. Featured items for the explore page

Scaling Considerations
1. Horizontal partitioning (sharding) may be needed for tables like posts, comments,
and likes as they grow

2. Consider using materialized views for analytics and reporting
3. Implement query optimization and database connection pooling
4. Monitor query performance and optimize as needed
This database schema provides a solid foundation for the music platform, supporting all
the required functionalities while considering performance, security, and scalability.

